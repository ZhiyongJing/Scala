package com.zhiyong.scala
import scala.util.control._;
import scala.util.control.Breaks._;
//this is a single line comments
/*this is a multiple-line
  comments*/
class MyClass(name: String, id: Int){
   def p{
     println(name);
     println(id);
   }
}
abstract class Notification

case class Email(sender: String, title: String, body: String) extends Notification

case class SMS(caller: String, message: String) extends Notification

case class VoiceRecording(contactName: String, link: String) extends Notification

abstract class Monoid[A] {
  def add(x: A, y: A): A
  def unit: A
}

object MyFirstScala {
  implicit val stringMonoid: Monoid[String] = new Monoid[String] {
    def add(x: String, y: String): String = x concat y
    def unit: String = ""
  }
  
  implicit val intMonoid: Monoid[Int] = new Monoid[Int] {
    def add(x: Int, y: Int): Int = x + y
    def unit: Int = 0
  }
  
  def sum[A](xs: List[A])(implicit m: Monoid[A]): A =
    if (xs.isEmpty) m.unit
    else m.add(xs.head, sum(xs.tail))
    
  def main(args: Array[String]) {
    
    // Implicit parameter
    println(sum(List(1, 2, 3)))       // uses intMonoid implicitly
    println(sum(List("a", "b", "c"))) // uses stringMonoid implicitly
    
//    var m = new MyClass("jimmy",18);
//    m.p;
//    
//    //use var to declare a mutable variable
//    var v: Int = 9;
//    v = 90;
//    
//    //use val to declare an immutable variable
//    val l = 0;
//    
//    //String is immutable in Scala
//    var s1 = "first";
//    var s2 = "second";
//    s1 = "third";
//    println(s1.charAt(0));
//    
//    //use the format to print multiple variable
//    println("%s, %d".format(s1,v));
//    //declare mutiple assignment with immutable variable
//    //val(name1:Int, name2:String) = pair(2, "geekforgeeks");
//    
//    // The syntax of while loop
//    var x = 4;
//    while (x <= 5) {
//      println("The value of x: " + x);
//      x = x + 1;
//    }
//    
//    //The syntax of for loop
//    var y = 83;
//    for (y <- 1 to 1) {
//      println(y);
//    }
//    
//    //The syntax of if else
//    var z: Int = 4;
//    if (z > 3){
//      println("this is if");
//    }
//    else if(z > 7){
//      println("this is else if");
//    }
//    else{
//      println("this is else");
//    }
//    println(test(3));
//    
//    //use break method to stop the loop
//    breakable  
//    {  
//        for (a <- 1 to 1)  
//        { 
//            if (a == 6) 
//                break  
//            else
//             println("break statement"+a);00
//            
//        } 
//    }
//    
    //data structure in scala
    //Arrays preserve order, can contain duplicates, and are mutable.
    val numArr: Array[Int] = Array(1,2,3,4,5)
    numArr(2) = 12
    //println("Array has been changed",numArr(2))
    
    //Lists preserve order, can contain duplicates, and are immutable.
    val numList: List[Int] = List(1,2,3,4)
    //println("List cannot be changed",numList(2))
    
    //Sets do not preserve order and have no duplicates, and are immutable
    val numSet:Set[Int] = Set(1,2,3,4,5)
    //println("this is set", numSet)
    
    //A tuple groups together simple logical collections of items without using a class.Unlike case classes, they donâ€™t have named accessors, 
    //instead they have accessors that are named by their position and is 1-based rather than 0-based. Tuples fit with pattern matching nicely.
    /*hostPort match {
  			case ("localhost", port) => ...
  			case (host, port) => ...
		}*/
    
    val tuple = ("key", "value")
    //println(tuple._1)
    
    
    
    //create an immutable map 
    val mapIm = Map("1st" -> (10,110),
        ("2nd", "20"),
        "3rd"-> Map("sub"->34))
    //println(mapIm("1st"), mapIm("3rd"))
    
    //Option is a container that may or may not hold something. 
    
        
    //Map function combination. Evaluates a function over each element in the list, returning a list with the same number of elements.
    val num = List(1, 2, 3, 4)
    val num1 = num.map((i: Int) => i * 2)
    val num3 = num.map(_ * 2)
    def timesTwo(i: Int): Int = i * 2
    val num2 = num.map(timesTwo)
    //println(num2)
    
    //Foreach function is like map but returns nothing. foreach is intended for side-effects only.
    num.foreach((i: Int) => i * 2)
    def foreach1(i: Int): Int= i*2
    //val doubled = num.foreach(foreach1)
    
    //Filter. Removes any elements where the function you pass in evaluates to false. Functions that return a Boolean are often called predicate functions.
    val fil = num.filter((i: Int) => i % 2 == 0)
    def isEven(i: Int): Boolean =  i % 2 == 0
    //println( num.filter(isEven))
    
    //Zip aggregates the contents of two lists into a single list of pairs.
    //println(List(1, 2, 3).zip(List("a", "b", "c","d")))

    //Partition splits a list based on where it falls with respect to a predicate function.
    val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    val par = numbers.partition(_ % 2 == 0)
    //println(par)
    
    //Find returns the first element of a collection that matches a predicate function.
    val fin = numbers.find((i: Int) => i > 3)
    //println(fin)
    
    //Drop drops the first i elements
    val dro = numbers.drop(4)
    //println(numbers,dro)
    
    //Flatten collapses one level of nested structure.
    val li = List(List(1, 2), List(3, 4)).flatten
    //println(li)
    
    //flatMap is a frequently used combinator that combines mapping and flattening. flatMap takes a function that works on the nested lists and then concatenates the results back together.
     val nestedNumbers = List(List(1, 2), List(3, 4))
     val fla = nestedNumbers.flatMap(x => x.map(_ * 2))
     println(fla)
     
     //check the case match function
     val someSms = SMS("12345", "Are you there?")
     val email = Email("1","2","3")
     val someVoiceRecording = VoiceRecording("Tom", "voicerecording.org/id/123")
     println(showNotification(someSms))  // prints You got an SMS from 12345! Message: Are you there?
     println(showNotification(someVoiceRecording))  // you received a Voice Recording from Tom! Click the link to hear it: voicerecording.org/id/123
     println(showNotification(email))
     val list2 = List('a','b','c')
     val rawMap = list2.map{name=>(name,"1")}.toMap
     println(rawMap)
    
     
	}
  
  //define function_name ([parameter_list]) : [return_type] = {function body}
  //The syntax of match(switch)
  def test(x: Int): String = x match{
    case 0 => "match case for 0";
    case 1 => "match case for 1";
    case _ => "match default case";

  }
  
  def showNotification(notification: Notification): String = {
  notification match {
    case Email(sender, title,_) =>
      s"You got an email from $sender with title: $title"
    case SMS(number, message) =>
      s"You got an SMS from $number! Message: $message"
    case VoiceRecording(name, link) =>
      s"you received a Voice Recording from $name! Click the link to hear it: $link"
  }
}
  
  
  
  







}
